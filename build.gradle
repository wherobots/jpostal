import org.gradle.internal.jvm.Jvm

plugins {
    id 'c'
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'org.jreleaser' version '1.19.0'
}

group = 'com.wherobots'
version = '1.2.2'

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
test {
    systemProperty 'file.encoding', 'UTF-8'
}

dependencies {
    testImplementation 'junit:junit:4.+'
    implementation 'org.apache.commons:commons-compress:1.26.2'
}

sourceSets.main.java.srcDirs = ["src/main/java"]
sourceSets.test.java.srcDirs = ["src/test/java"]


// Native Code Configuration
model {
    toolChains {
        clang(Clang) // Needed for macOS
        gcc(Gcc) {
            target("linux_aarch64") {
                cCompiler.executable = "aarch64-linux-gnu-gcc"
                linker.executable = "aarch64-linux-gnu-gcc"
            }
        }
    }

    components {
        jpostal(NativeLibrarySpec) {
            binaries.withType(StaticLibraryBinarySpec) { buildable = false }
            binaries.withType(SharedLibraryBinarySpec) {

                def operatingSystem = targetPlatform.operatingSystem.macOsX ? 'darwin' :
                        targetPlatform.operatingSystem.linux ? 'linux' :
                                targetPlatform.operatingSystem.windows ? 'windows' :
                                        targetPlatform.operatingSystem.freeBSD ? 'freebsd' : null

                def architecture = targetPlatform.architecture.arm64 ? 'arm64' :
                        targetPlatform.architecture.amd64 ? 'x64' :
                                targetPlatform.architecture.x86 ? 'x86' : null

                def extension = targetPlatform.operatingSystem.macOsX ? 'dylib' :
                        targetPlatform.operatingSystem.linux ? 'so' :
                                targetPlatform.operatingSystem.windows ? 'dll' :
                                        targetPlatform.operatingSystem.freeBSD ? 'so' : null
                sharedLibraryFile = file("${buildDir}/libs/jpostal/${operatingSystem}-${architecture}/libjpostal.${extension}")
            }

            binaries.all {
                def jvmHome = Jvm.current().javaHome
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    linker.args '-mmacosx-version-min=10.9'
                    linker.args '-stdlib=libc++'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${jvmHome}/include"
                    cCompiler.args "-I${jvmHome}/include/win32"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/freebsd"
                }

                linker.args '-lpostal'  // Link with libpostal
            }
        }
    }
}

// Add shared libs into the jar
classes.dependsOn 'jpostalSharedLibrary'
processResources.dependsOn(':linkJpostalSharedLibrary')
processResources.duplicatesStrategy DuplicatesStrategy.EXCLUDE
sourceSets {
    main {
        resources {
            // Prefer contents of otherResources over "$buildDir/libs/jpostal/"
            srcDir "otherResources" // For including native libraries built by other means
            srcDir "$buildDir/libs/jpostal/"
            exclude "shared"
        }
    }
}

// Publishing
jar {
    archiveBaseName.set(project.name)
    archiveVersion.set(project.version.toString())
}


java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}
sourcesJar.dependsOn(':linkJpostalSharedLibrary')
sourcesJar.duplicatesStrategy DuplicatesStrategy.EXCLUDE

// Configure publishing
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'jpostal'

            from components.java

            pom {
                name = 'jpostal'
                description = 'Java bindings for libpostal'
                url = 'https://github.com/wherobots/jpostal'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                // TODO consider changing this to point to openvenues
                developers {
                    developer {
                        id = 'james-willis'
                        name = 'James Willis'
                        email = 'james@wherobots.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/wherobots/jpostal.git'
                    developerConnection = 'scm:git:ssh://github.com/wherobots/jpostal.git'
                    url = 'https://github.com/wherobots/jpostal'
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            mavenCentral {
                'release-deploy' {
                    active = 'RELEASE'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                }
            }
            nexus2 {
                'snapshot-deploy' {
                    active = 'SNAPSHOT'
                    snapshotUrl = 'https://central.sonatype.com/repository/maven-snapshots/'
                    applyMavenCentralRules = true
                    snapshotSupported = true
                    closeRepository = true
                    releaseRepository = true
                    stagingRepository('build/staging-deploy')
                }
            }
        }
    }
}